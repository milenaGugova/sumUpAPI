package steps;import java.util.List;import java.util.Map;import helpers.PropertiesCache;import io.cucumber.datatable.DataTable;import org.junit.Assert;import io.cucumber.java.en.Given;import io.cucumber.java.en.Then;import io.restassured.RestAssured;import io.restassured.path.json.JsonPath;import io.restassured.response.Response;import io.restassured.specification.RequestSpecification;public class APISteps {    private static String token;    @Given("I am an authorized user")    public void iAmAnAuthorizedUser() {        RestAssured.baseURI = PropertiesCache.getInstance().getProperty("base.url");        String client_id = PropertiesCache.getInstance().getProperty("client_id");        String client_secret = PropertiesCache.getInstance().getProperty("client_secret");        String username = PropertiesCache.getInstance().getProperty("username");        String password = PropertiesCache.getInstance().getProperty("password");        RequestSpecification request = RestAssured.given();        request.header("Content-Type", "application/json");        Response response = request.body("{ \"client_id\":\"" + client_id + "\", \"client_secret\":\"" + client_secret + "\", \"username\":\"" + username + "\", \"password\":\"" + password + "\"}")                .post("/oauth");        String jsonString = response.asString();        token = JsonPath.from(jsonString).get("access_token");    }    @Then("I verify that user have no transactions")    public void verifyNoTransactionsOfUser() {        RestAssured.baseURI = PropertiesCache.getInstance().getProperty("base.url");        RequestSpecification request = RestAssured.given();        request.header("Authorization", "Bearer " + token)                .header("Content-Type", "application/json");        Response response = request                .get("/v0.1/me/transactions/history");        String jsonString = response.asString();        List<Map<String, String>> transactionsOfUser = JsonPath.from(jsonString).get("items");        Assert.assertEquals(0, transactionsOfUser.size());    }    @Then("I verify bank account(s) associated with:")    public void verifyBankAccountsAssociatedWith(Map<String, String> dataTable) {        RestAssured.baseURI = PropertiesCache.getInstance().getProperty("base.url");        RequestSpecification request = RestAssured.given();        request.header("Authorization", "Bearer " + token)                .header("Content-Type", "application/json");        Response response = request                .get("/v0.1/me/merchant-profile/bank-accounts");        String jsonString = response.asString();        for (String field : dataTable.keySet()) {            String transactionsOfUser = JsonPath.from(jsonString).getString(field);            Assert.assertEquals("[" + dataTable.get(field) + "]", transactionsOfUser);        }    }}